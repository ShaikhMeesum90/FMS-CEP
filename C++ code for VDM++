#include <iostream>
#include <string>

class TemperatureSensor {
private:
    std::string sensorType;
    double temperature;

public:
    TemperatureSensor(const std::string& st, double temp) : sensorType(st), temperature(temp) {
        if (temp < 0 || temp > 100) {
            throw std::invalid_argument("Temperature should be between 0 and 100.");
        }
    }

    double GetTemperature() const {
        return temperature;
    }
};

class Thermostat {
private:
    double currentTemperature;

public:
    void SetTemperature(double temp) {
        if (temp < 0 || temp > 100) {
            throw std::invalid_argument("Temperature should be between 0 and 100.");
        }
        currentTemperature = temp;
    }

    void AdjustTemperature(const TemperatureSensor& sensor) {
        currentTemperature = sensor.GetTemperature();
    }

    double GetCurrentTemperature() const {
        return currentTemperature;
    }
};

class LightingControl {
private:
    std::string lightType;
    unsigned int brightness;

public:
    LightingControl(const std::string& lt, unsigned int b) : lightType(lt), brightness(b) {
        if (b > 100) {
            throw std::invalid_argument("Brightness should be between 0 and 100.");
        }
    }

    void AdjustBrightness(unsigned int b) {
        if (b > 100) {
            throw std::invalid_argument("Brightness should be between 0 and 100.");
        }
        brightness = b;
    }

    unsigned int GetBrightness() const {
        return brightness;
    }
};

class SecuritySystem {
private:
    unsigned int securityLevel;
    bool isArmed;

public:
    SecuritySystem(unsigned int sl, bool armed) : securityLevel(sl), isArmed(armed) {}

    void ArmSystem() {
        isArmed = true;
    }

    void DisarmSystem() {
        isArmed = false;
    }

    bool IsArmed() const {
        return isArmed;
    }
};

// ... (previous code)

class EntertainmentDevice {
private:
    std::string deviceType;
    std::string mediaType;

public:
    EntertainmentDevice(const std::string& dt, const std::string& mt) : deviceType(dt), mediaType(mt) {}

    void PlayMedia() const {
        std::cout << "Playing " << mediaType << " on " << deviceType << "." << std::endl;
    }

    void PauseMedia() const {
        std::cout << "Media paused on " << deviceType << "." << std::endl;
    }
};

class SmartHomeSystem {
private:
    TemperatureSensor temperatureSensor;
    Thermostat thermostat;
    LightingControl lightingControl;
    SecuritySystem securitySystem;
    EntertainmentDevice entertainmentDevice;

public:
    SmartHomeSystem() :
        temperatureSensor("DHT22", 25.0),
        thermostat(),
        lightingControl("LED", 50),
        securitySystem(3, false),
        entertainmentDevice("Speaker", "Audio") {}

    void PerformSmartHomeOperations() {
        int choice;
        do {
            std::cout << "Smart Home Operations Menu:" << std::endl;
            std::cout << "1. Set Thermostat Temperature" << std::endl;
            std::cout << "2. Adjust Lighting Brightness" << std::endl;
            std::cout << "3. Arm/Disarm Security System" << std::endl;
            std::cout << "4. Play/Pause Entertainment Device" << std::endl;
            std::cout << "0. Exit" << std::endl;
            std::cout << "Enter your choice: ";
            std::cin >> choice;

            switch (choice) {
                case 1: {
                    double newTemp;
                    std::cout << "Enter new temperature for the thermostat: ";
                    std::cin >> newTemp;
                    thermostat.SetTemperature(newTemp);
                    std::cout << "Thermostat temperature set to: " << thermostat.GetCurrentTemperature() << " degrees." << std::endl;
                    break;
                }
                case 2: {
                    unsigned int newBrightness;
                    std::cout << "Enter new brightness level for lighting control: ";
                    std::cin >> newBrightness;
                    lightingControl.AdjustBrightness(newBrightness);
                    std::cout << "Brightness adjusted to: " << lightingControl.GetBrightness() << "." << std::endl;
                    break;
                }
                case 3:
                    if (securitySystem.IsArmed()) {
                        securitySystem.DisarmSystem();
                        std::cout << "Security system disarmed." << std::endl;
                    } else {
                        securitySystem.ArmSystem();
                        std::cout << "Security system armed." << std::endl;
                    }
                    break;
                case 4:
                    entertainmentDevice.PlayMedia();
                    // Optionally add more features for entertainment device control
                    break;
                case 0:
                    std::cout << "Exiting Smart Home System." << std::endl;
                    break;
                default:
                    std::cout << "Invalid choice. Please enter a valid option." << std::endl;
            }
        } while (choice != 0);
    }
};

int main() {
    // Create a SmartHomeSystem instance
    SmartHomeSystem mySmartHome;

    // Perform smart home operations
    mySmartHome.PerformSmartHomeOperations();

    return 0;
}
